buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        if (project.projectVersion.endsWith('-SNAPSHOT')) {
            maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
        }
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
        classpath "org.graceframework:grace-gradle-plugin:$graceVersion"
        classpath "org.gradle:test-retry-gradle-plugin:1.4.0"
        classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementPluginVersion"
    }
}

ext {
    isReleaseVersion = !project.projectVersion.endsWith('-SNAPSHOT')
    userOrg = "graceframework"
}

group "org.graceframework"
version project.projectVersion

apply plugin:'idea'

apply plugin: 'maven-publish'
apply plugin: "io.github.gradle-nexus.publish-plugin"

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}

subprojects { project->
    if (project.name.startsWith('grace-plugin')) {
        group "org.graceframework.plugins"
    }
    else {
        group "org.graceframework"
    }
    version project.projectVersion

    if (project.name.startsWith('examples') || project.name.endsWith('docs')) {
        return
    }

    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: "org.gradle.test-retry"
    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        // mavenLocal()
        mavenCentral()
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        if (project.projectVersion.endsWith('-SNAPSHOT')) {
            maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.graceframework:grace-bom:$graceVersion"
        }
        applyMavenExclusions false
    }

    apply from: '../publishing/mavenCentral.gradle'


    if (project.name.startsWith('grace-')) {
        configurations {
            documentation
        }

        dependencies {
            api "org.codehaus.groovy:groovy:$groovyVersion"
            api "org.slf4j:slf4j-api:$slf4jVersion"
            documentation "org.fusesource.jansi:jansi:$jansiVersion"
            documentation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"
            documentation "info.picocli:picocli:$picocliVersion"
            documentation "com.github.javaparser:javaparser-core:$javaParserCoreVersion"

            testImplementation "org.spockframework:spock-core:$spockVersion"
            testImplementation "org.codehaus.groovy:groovy-test-junit5:$groovyVersion"
            testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
            testImplementation "org.junit.platform:junit-platform-runner:$junitJupiterPlatformVersion"
            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
        }

        java {
            withJavadocJar()
            withSourcesJar()
        }

        tasks.withType(Test) {
            useJUnitPlatform()
            testLogging {
                showStandardStreams = true
                exceptionFormat = 'full'
            }
            configure {
                retry {
                    maxRetries = 2
                    maxFailures = 20
                    failOnPassedAfterRetry = true
                }
            }
        }

        groovydoc.classpath = configurations.documentation
    }

}
